name: Website CI/CD

on:
  push:
    branches:
      - main

jobs:
  quality-gate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          npm ci

      - name: Run HTML/CSS/JS Lint
        run: |
          echo "Running code quality checks..."
          npx eslint ./ --ext .js
          npx stylelint "**/*.css"
          # add more linters if needed

      - name: Initialize Terraform
        run: terraform init -backend=false

      - name: Validate Terraform
        run: terraform validate

  deploy:
    needs: quality-gate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Backup current S3 files
        run: |
          echo "Backing up current S3 files..."
          aws s3 sync s3://your-bucket-name s3://your-bucket-name-backup-$(date +%Y%m%d%H%M%S)

      - name: Sync files to S3
        run: |
          aws s3 sync ./website s3://your-bucket-name --delete

      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DIST_ID }} \
            --paths "/*"

  rollback:
    needs: deploy
    if: ${{ failure() }}
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Rollback to backup
        run: |
          echo "Deploy failed. Rolling back to backup..."
          # Find the latest backup folder
          LATEST_BACKUP=$(aws s3 ls s3://your-bucket-name-backup/ | sort | tail -n 1 | awk '{print $2}')
          echo "Restoring backup: $LATEST_BACKUP"
          aws s3 sync s3://your-bucket-name-backup/$LATEST_BACKUP s3://your-bucket-name --delete
          # Invalidate CloudFront again after rollback
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DIST_ID }} \
            --paths "/*"
